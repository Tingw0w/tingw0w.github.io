<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tingw0w</title>
    <link>https://tingw0w.github.io/</link>
    <description>Recent content on Tingw0w</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 15 Jul 2019 13:07:11 +0800</lastBuildDate>
    
	<atom:link href="https://tingw0w.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[读书笔记] Linux 第 2 章 文件 I/O 上</title>
      <link>https://tingw0w.github.io/content/linux-2-1/</link>
      <pubDate>Mon, 15 Jul 2019 13:07:11 +0800</pubDate>
      
      <guid>https://tingw0w.github.io/content/linux-2-1/</guid>
      <description>文件I/O 在对文件进行读写操作之前，首先要打开文件。内核会为每个进程维护一个打开文件的列表，该列表称为文件表 (file table)。 文件表是由一些非负整数进行索引，这些非负整数称为文件描述符 (file descriptors, fds)。列表的每一项是一个打开文件的信息，包括指向该文件索引节点 (inode) 内存拷贝的指针以及关联的元数据，如文件位置指针和访问模式。用户空间和内核空间都使用文件描述符作物唯一 cookies : 打开文件会返回文件描述符，而后续操作 (读写等) 都把文件描述符作为基本参数。 每个进程至少包含三个文件描述符：0、1和 2，除非显式的关闭这些描述符。  文件描述符 0 表示变准输入 (sdtin)，1 表示标准输出 (stdout)，2 表示标准错误 (stdeer)。Linux C 标准库没有直接引用这些整数，而是提供了三个宏：STDIN_FILENO, STDOUT_FILENO 和 STDERR_FILENO。
打开文件 最基本的文件访问方法时系统调用 read() 和 write()。
但是，在访问文件之前，必须先通过 open() 或 creat() 打开文件。一旦完成文件读写，还应该调用系统调用 close() 关闭该文件。
 
系统调用 open() #include &amp;lt;sys/types.h&amp;gt; #include&amp;lt;sys/stat.h&amp;gt; #include&amp;lt;fcntl.h&amp;gt; int open(const char *name, int flags); int open(const char *name, int flags,mode_t mode);  open() 调用成功，会返回文件描述符，指向路径名 name 所制定的文件。文件位置即文件的气势位置 (0)，文件打开方式是根据参数 flags 来确定的。</description>
    </item>
    
    <item>
      <title>[读书笔记] Linux系统编程 第 1 章 入门基本概念</title>
      <link>https://tingw0w.github.io/content/linux-1/</link>
      <pubDate>Fri, 05 Jul 2019 13:06:38 +0800</pubDate>
      
      <guid>https://tingw0w.github.io/content/linux-1/</guid>
      <description>本次学习笔记是从 《Linux 系统编程》这本书习得，如有我理解错误，或者侵权的地方请联系我 [联系方式 QQ] 573836705。 《Linux 系统编程》 涵盖的是现代 Linux 机器上所使用的系统编程 API, 也就是说这本书给的都是使用的接口 (的确这本书里面都是 Linux 下的函数，以及函数的使用方式)。
系统编程的基础 Linux 系统编程有 3 大基石：系统调用、C 库和 C 编译器。
系统调用 系统编程始于系统调用，也终于系统调用。系统调用 (通常称为 syscall) 是为了从操作系统请求一些服务或资源。
C库 C库 (libc) 是 Unix 应用程序的核心。即使你是使用其他语言编程，通常还是会通过该机器语言封装的 C 库来提供核心服务，以方便系统调用。 在现代 Linux 系统中，C 库由 GNU libc 提供， 简称 glibc 。
C 编译器 在 Linux 中，标准 C 编译器是由 GNU 编译器工具集 (GNU Compiler Collection gcc) 提供的。 最初 gcc 是 GNU 版本的 C 编译器 cc，因此，gcc 表示 GNU C 编译器 (GNU C Compiler)。 随着时间的退役，gcc 支持越来越多的语言。之后 gcc 就成为 GNU 编译器家族的代名词。 GNU C++ 编译器是 Linux 系统为 C++ 提供的标准编译器，由二进制程序 g++ 提供。</description>
    </item>
    
    <item>
      <title>CGI C&#43;&#43;</title>
      <link>https://tingw0w.github.io/content/cgi-c&#43;&#43;/</link>
      <pubDate>Sat, 29 Jun 2019 15:58:30 +0800</pubDate>
      
      <guid>https://tingw0w.github.io/content/cgi-c&#43;&#43;/</guid>
      <description>CGI CGI (Common Gateway Interface, 通用网关接口)
&amp;#160; &amp;#160; &amp;#160; &amp;#160;这篇文章从《后台开发 核心技术与应用实践中》学得，还有部分内容从网上博客中了解，如有侵权请联系我删除。[联系方式 QQ]: 573836705
&amp;#160; &amp;#160; &amp;#160; &amp;#160;目前我的能力也只能够了解CGI是什么了，再多的内容，由于我的知识面还是太窄，看到复杂的内容头晕。
CGI是什么？ &amp;#160; &amp;#160; &amp;#160; &amp;#160;CGI是一个协议，协议就是人类写出来然后用来方便网络通信的。最早的web服务器简单的响应浏览器发来的HTTP请求，并将存储在服务器上的HTTP文件返回给用户浏览器&amp;ndash;这也就是静态HTML.
&amp;#160; &amp;#160; &amp;#160; &amp;#160;随着时间的发展，出现了动态技术，web服务器所处理的内容都是静态的，要想处理动态内容就需要依赖web动态程序 (php、jsp、python、perl)。想要处理这样的程序，就出现了CGI协议。
 
组成 CGI 通信系统的两部分  HTML 页面 &amp;ndash; 用户端浏览器上的页面 CGI 程序 &amp;ndash; 服务器    &amp;#160; &amp;#160; &amp;#160; &amp;#160;客户端 &amp;ndash; 服务器 之间的通信 == 客户端的浏览器 &amp;ndash; 服务器端的 web 服务器 之间的 HTTP 通信 所以只要知道浏览器请求执行服务器上哪个 CGI 程序就可以。
&amp;#160; &amp;#160; &amp;#160; &amp;#160;服务器和 CGI 程序之间是通过标准输入输出来进行数据传递的，而这个过程需要环境变量 的协作方可实现。</description>
    </item>
    
    <item>
      <title>Windows下hugo搭建</title>
      <link>https://tingw0w.github.io/windows%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 03 Jun 2019 12:36:34 +0800</pubDate>
      
      <guid>https://tingw0w.github.io/windows%E4%B8%8Bhugo%E6%90%AD%E5%BB%BA/</guid>
      <description>基于go语言的hugo Windows下的hugo搭建，穷困潦倒，还要玩游戏，先在Windows下搭建一下，以后有机会换系统。 他说很简单，简单~
安装hugo&amp;ndash;在github上&amp;ndash;release&amp;ndash;检查安装是否完成 hugo官网下载合适的windows版本：https://github.com/gohugoio/hugo/releases
我选的是64位的Windows版本。 插入图片
 
然后在Windows下配置环境变量。
 
系统变量配置完毕之后可以在cmd命令行窗口查看是否装好。
 
用hugo生成一个博客 先用hugo生成一个静态网页，在本地查看，之后在传到github上的仓库上去。 找到一个你自己喜欢的文件夹生成一个blog文件夹（想叫什么名字就叫什么名字，无所谓的事情）
 
创建一个hugo项目
 
下载并设置主题&amp;ndash;可去官网下载主题 &amp;ndash; themes.gohugo.io &amp;ndash; 首先需要安装git，而且需要配置好 找到一个好看的主题，再设计网页。（themes.gohugo.io &amp;ndash; 官网主题）
 
选了一个多姿多彩的主题，每个主题里面都有相对应的下载方式，就比如这个需要用git下载安装.
 
在git中下载安装好
 
添加一个静态网页.md格式的文件，在content文件夹下添加
 
在本地启动个人博客&amp;ndash;用markdown写博客 在git中用vim格式添加markdown内容。
 
在本地配置服务器查看一下你的网页 。。。。这个网页不适合新手学习的，比如我，但是真的比我以前选的好看，我看看怎么搞，可以使用但是这个模板有太多我不想要的东西，我还是先用回我那个简单的模板。。。m10c
 
运行一下本地服务就很快的好了。。。
 
这样的一个网站
 
部署到免费的github上的仓库&amp;ndash;将个人博客部署到远端服务器 在github上创一个仓库
 
首先要建一个仓库(github) &amp;ndash; new repository 新仓库的名字必须这么命名，否则无法打开网站，这是github网站的命名规则username.github.io 建了一个空仓库
然后创建一个public文件等待上传到github仓库中
hugo &amp;ndash;theme=m10c &amp;ndash;baseUrl=&amp;ldquo;https://tingw0w.</description>
    </item>
    
  </channel>
</rss>