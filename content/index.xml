<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Contents on Tingw0w</title>
    <link>https://tingw0w.github.io/content/</link>
    <description>Recent content in Contents on Tingw0w</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 05 Jul 2019 13:06:38 +0800</lastBuildDate>
    
	<atom:link href="https://tingw0w.github.io/content/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[读书笔记] Linux系统编程 第 1 章 入门基本概念</title>
      <link>https://tingw0w.github.io/content/linux-1/</link>
      <pubDate>Fri, 05 Jul 2019 13:06:38 +0800</pubDate>
      
      <guid>https://tingw0w.github.io/content/linux-1/</guid>
      <description>本次学习笔记是从 《Linux 系统编程》这本书习得，如有我理解错误，或者侵权的地方请联系我 [联系方式 QQ] 573836705。 《Linux 系统编程》 涵盖的是现代 Linux 机器上所使用的系统编程 API, 也就是说这本书给的都是使用的接口 (的确这本书里面都是 Linux 下的函数，以及函数的使用方式)。
系统编程的基础 Linux 系统编程有 3 大基石：系统调用、C 库和 C 编译器。
系统调用 系统编程始于系统调用，也终于系统调用。系统调用 (通常称为 syscall) 是为了从操作系统请求一些服务或资源。
C库 C库 (libc) 是 Unix 应用程序的核心。即使你是使用其他语言编程，通常还是会通过该机器语言封装的 C 库来提供核心服务，以方便系统调用。 在现代 Linux 系统中，C 库由 GNU libc 提供， 简称 glibc 。
C 编译器 在 Linux 中，标准 C 编译器是由 GNU 编译器工具集 (GNU Compiler Collection gcc) 提供的。 最初 gcc 是 GNU 版本的 C 编译器 cc，因此，gcc 表示 GNU C 编译器 (GNU C Compiler)。 随着时间的退役，gcc 支持越来越多的语言。之后 gcc 就成为 GNU 编译器家族的代名词。 GNU C++ 编译器是 Linux 系统为 C++ 提供的标准编译器，由二进制程序 g++ 提供。</description>
    </item>
    
    <item>
      <title>CGI C&#43;&#43;</title>
      <link>https://tingw0w.github.io/content/cgi-c&#43;&#43;/</link>
      <pubDate>Sat, 29 Jun 2019 15:58:30 +0800</pubDate>
      
      <guid>https://tingw0w.github.io/content/cgi-c&#43;&#43;/</guid>
      <description>CGI CGI (Common Gateway Interface, 通用网关接口)
&amp;#160; &amp;#160; &amp;#160; &amp;#160;这篇文章从《后台开发 核心技术与应用实践中》学得，还有部分内容从网上博客中了解，如有侵权请联系我删除。[联系方式 QQ]: 573836705
&amp;#160; &amp;#160; &amp;#160; &amp;#160;目前我的能力也只能够了解CGI是什么了，再多的内容，由于我的知识面还是太窄，看到复杂的内容头晕。
CGI是什么？ &amp;#160; &amp;#160; &amp;#160; &amp;#160;CGI是一个协议，协议就是人类写出来然后用来方便网络通信的。最早的web服务器简单的响应浏览器发来的HTTP请求，并将存储在服务器上的HTTP文件返回给用户浏览器&amp;ndash;这也就是静态HTML.
&amp;#160; &amp;#160; &amp;#160; &amp;#160;随着时间的发展，出现了动态技术，web服务器所处理的内容都是静态的，要想处理动态内容就需要依赖web动态程序 (php、jsp、python、perl)。想要处理这样的程序，就出现了CGI协议。
 
组成 CGI 通信系统的两部分  HTML 页面 &amp;ndash; 用户端浏览器上的页面 CGI 程序 &amp;ndash; 服务器    &amp;#160; &amp;#160; &amp;#160; &amp;#160;客户端 &amp;ndash; 服务器 之间的通信 == 客户端的浏览器 &amp;ndash; 服务器端的 web 服务器 之间的 HTTP 通信 所以只要知道浏览器请求执行服务器上哪个 CGI 程序就可以。
&amp;#160; &amp;#160; &amp;#160; &amp;#160;服务器和 CGI 程序之间是通过标准输入输出来进行数据传递的，而这个过程需要环境变量 的协作方可实现。</description>
    </item>
    
  </channel>
</rss>